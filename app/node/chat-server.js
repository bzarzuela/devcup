// Generated by CoffeeScript 1.6.3
var agents, app, conns, express, http, joinRoom, rooms, sendMessage, sendWhisper, server, sockjs, supervisor, whisper;

http = require('http');

sockjs = require('sockjs');

express = require('express');

app = sockjs.createServer();

rooms = {
  global: []
};

conns = {};

agents = {};

supervisor = {};

joinRoom = function(room, conn, see_whisper) {
  if (see_whisper == null) {
    see_whisper = false;
  }
  console.log(see_whisper);
  conn.canSeeWhisper = see_whisper;
  console.log(conn.canSeeWhisper);
  console.log('Room: ', room);
  if (!rooms[room]) {
    console.log('init room');
    rooms[room] = {};
  }
  if (!conns[conn.id]) {
    console.log('init conn');
    conns[conn.id] = {};
  }
  conns[conn.id][room] = room;
  rooms[room][conn.id] = conn;
  return console.log(conn.id, ' joined room: ', room);
};

sendWhisper = function(room, data) {
  var conn, id, _ref, _results;
  if (!rooms[room]) {
    return console.log('Invalid Room: ', room);
  }
  _ref = rooms[room];
  _results = [];
  for (id in _ref) {
    conn = _ref[id];
    console.log('Checking for whisper: ', id);
    if (conn.canSeeWhisper) {
      _results.push(conn.write(JSON.stringify(data)));
    } else {
      _results.push(console.log('Cannot see whisper', id));
    }
  }
  return _results;
};

sendMessage = function(room, data) {
  var conn, id, _ref, _results;
  if (!rooms[room]) {
    return console.log('Invalid Room: ', room);
  }
  _ref = rooms[room];
  _results = [];
  for (id in _ref) {
    conn = _ref[id];
    console.log('Writing to: ', id);
    _results.push(conn.write(JSON.stringify(data)));
  }
  return _results;
};

whisper = function(room, message) {
  var conn, id, _ref, _results;
  if (!rooms[room]) {
    return console.log('Invalid Room: ', room);
  }
  _ref = rooms[room];
  _results = [];
  for (id in _ref) {
    conn = _ref[id];
    if (conn.canSeeWhisper) {
      console.log('Whispering to: ', id);
      _results.push(conn.write(message));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

app.on('connection', function(conn) {
  conn.on('data', function(data) {
    var e;
    try {
      data = JSON.parse(data);
    } catch (_error) {
      e = _error;
      return console.log(data, 'is not json');
    }
    switch (data.type) {
      case 'join':
        return joinRoom(data.payload, conn, data.see_whisper);
      case 'message':
        return sendMessage(data.room, data);
      case 'whisper':
        return whisper(data.room, data.payload);
      case 'online':
        if (data.access === 'supervisor') {
          console.log('Supervisor going online: ', conn.id);
          supervisor[conn.id] = conn;
          return conn.write(JSON.stringify({
            type: 'online',
            conn_id: conn.id
          }));
        } else {
          console.log('Agent going online: ', conn.id);
          agents[conn.id] = conn;
          return conn.write(JSON.stringify({
            type: 'online',
            conn_id: conn.id
          }));
        }
        break;
      case 'offline':
        console.log('Agent signing out: ', conn.id);
        delete agents[conn.id];
        return conn.write(JSON.stringify({
          type: 'offline',
          conn_id: 'Not Ready'
        }));
    }
  });
  return conn.on('close', function() {
    var room;
    for (room in conns[conn.id]) {
      if (rooms[room][conn.id]) {
        console.log(conn.id, ' leaving room: ', room);
        delete rooms[room][conn.id];
      }
    }
    if (conns[conn.id]) {
      console.log(conn.id, ' removing from global conns');
      delete conns[conn.id];
    }
    if (agents[conn.id]) {
      console.log(conn.id, ' removing from global agents');
      return delete agents[conn.id];
    }
  });
});

server = express.createServer();

server.use(express.bodyParser());

app.installHandlers(server, {
  prefix: '/sockjs'
});

server.post('/chatty/send', function(req, res) {
  var data;
  data = JSON.parse(req.body.json);
  sendMessage(data.room, data);
  return res.send('ok');
});

server.post('/chatty/whisper', function(req, res) {
  var data;
  data = JSON.parse(req.body.json);
  sendWhisper(data.room, data);
  return res.send('ok');
});

server.get('/chatty/popup/:conn_id/:room/:ref/:name', function(req, res) {
  var conn_id;
  console.log('Popup Request: ', req.params.conn_id, req.params.room);
  conn_id = req.params.conn_id;
  if (agents[conn_id] === void 0) {
    console.log('No agent available');
    return res.send(JSON.stringify({
      success: false,
      message: 'No agent available'
    }));
  } else {
    console.log('Sending popup message');
    agents[conn_id].write(JSON.stringify({
      type: 'popup',
      room: req.params.room,
      ref: req.params.ref,
      name: req.params.name
    }));
    return res.send(JSON.stringify({
      success: true,
      name: req.params.name
    }));
  }
});

server.get('/chatty/popup-supervisor/:conn_id/:room/:ref/:name', function(req, res) {
  var conn_id;
  console.log('Popup Request for Supervisor: ', req.params.conn_id, req.params.room);
  conn_id = req.params.conn_id;
  if (supervisor[conn_id] === void 0) {
    return console.log('No Supervisor available');
  } else {
    console.log('Sending popup message to supervisor');
    supervisor[conn_id].write(JSON.stringify({
      type: 'popup',
      room: req.params.room,
      ref: req.params.ref,
      name: req.params.name
    }));
    return res.send(JSON.stringify({
      success: true,
      name: req.params.name
    }));
  }
});

if (process.argv[2] === void 0) {
  server.listen(8081, '0.0.0.0');
  console.log('listening at 8081');
} else {
  server.listen(process.argv[2], '0.0.0.0');
  console.log('listening at ' + process.argv[2]);
}
